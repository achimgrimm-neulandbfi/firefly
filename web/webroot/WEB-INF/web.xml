<?xml version="1.0" encoding="iso-8859-1"?>

<web-app id="firefly" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>firefly</display-name>

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

    <!--login-config>
        <auth-method>BASIC</auth-method>
    </login-config-->>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        Enabling Spring managed Delegating Filter Proxy for hybris Filter Stack.
    -->
    <filter>
        <filter-name>fireflyPlatformFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>fireflyPlatformFilterChain</filter-name>
        <servlet-name>firefly-api</servlet-name>
    </filter-mapping>

    <!--
        Filter that will do initialization work for each web application which include:
        - Getting the JaloSession from the HttpSession or, if not available, create a new JaloSession
        - Activate this JaloSession so that calls to JaloSession.getCurrentSession() can be performed.
        - Iterate through all managers and call the doPreRequest(..) method.
    -->
    <filter>
        <filter-name>InitFilter</filter-name>
        <filter-class>de.hybris.platform.util.WebServicesInitFilter</filter-class>
        <!-- GZIP compression of response (default = true) -->
        <init-param>
            <param-name>enable.compression</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>tenantIDPattern</param-name>
            <param-value>;\s*tenantID\s*=\s*(\w+)</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>InitFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        DelegatingFilterProxy is a Spring Framework class which delegates to a filter implementation which is defined as a Spring
        bean in your application context. In this case, the bean is named "springSecurityFilterChain", which is an internal
        infrastructure bean created by the namespace to handle web security.
    -->
    <!--filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <servlet-name>firefly-api</servlet-name>
    </filter-mapping-->

    <!--
        Enabling a Spring web application context with 'session' and 'request' scope.
        - The 'contextConfigLocation' param specifies where your configuration files are located.
        - The HybrisContextLoaderListener extends the usual SpringContextLoaderListener (which loads
          the context from specified location) by adding the global application context of
          the platform as parent context. With having the global context set as parent you can access
          or override beans of the global context and get the 'tenant' scope.
        - The RequestContextListener is needed for exposing the 'request' scope to the context.
          Furthermore it is needed when overriding the 'jalosession' bean for your web application.
     -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>WEB-INF/firefly-web-spring.xml</param-value>
    </context-param>

    <listener>
        <listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <listener>
        <listener-class>de.neuland.firefly.web.ApplicationListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>firefly-api</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>firefly-api</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
</web-app> 
